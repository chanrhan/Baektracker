{"ast":null,"code":"import { AxiosApi } from \"../setup/api/ApiCommon\";\nfunction problemApi() {\n  const axiosApi = AxiosApi();\n  return {\n    getWeeklySharedSolved: async date => {\n      return axiosApi.get(`/api/v1/problem/shared-problem/weekly-solved?date=${date}`);\n    },\n    getProblem: async body => {\n      return axiosApi.post(`/api/v1/problem`, body, null);\n    },\n    loadBaekjoon: async () => {\n      return axiosApi.get(`/api/v1/problem/reload`, null);\n    },\n    getSharedProblem: async date => {\n      return axiosApi.get(`/api/v1/problem/shared-problem?date=${date}`, null);\n    },\n    updateSharedProblem: async (date, body) => {\n      return axiosApi.post(`/api/v1/problem/shared-problem?date=${date}`, body, null);\n    },\n    getProblemInfoList: async keyword => {\n      return axiosApi.get(`/api/v1/problem/problem/info/list?keyword=${keyword}`, null);\n    },\n    getUsersByProblem: async problemId => {\n      return axiosApi.get(`/api/v1/problem/users/solved?problemId=${problemId}`, null);\n    },\n    getProblemSource: async submitId => {\n      return axiosApi.get(`/api/v1/problem/source?submitId=${submitId}`, null);\n    }\n  };\n}\nexport default problemApi;","map":{"version":3,"names":["AxiosApi","problemApi","axiosApi","getWeeklySharedSolved","date","get","getProblem","body","post","loadBaekjoon","getSharedProblem","updateSharedProblem","getProblemInfoList","keyword","getUsersByProblem","problemId","getProblemSource","submitId"],"sources":["/Users/chan/Baektracker/src/main/frontend/src/js/api/problemApi.js"],"sourcesContent":["import {AxiosApi} from \"../setup/api/ApiCommon\";\n\nfunction problemApi(){\n    const axiosApi = AxiosApi();\n    return {\n        getWeeklySharedSolved: async (date)=>{\n            return axiosApi.get(`/api/v1/problem/shared-problem/weekly-solved?date=${date}`);\n        },\n        getProblem: async (body)=>{\n            return axiosApi.post(`/api/v1/problem`, body, null);\n        },\n        loadBaekjoon: async ()=>{\n            return axiosApi.get(`/api/v1/problem/reload`, null);\n        },\n        getSharedProblem: async (date)=>{\n            return axiosApi.get(`/api/v1/problem/shared-problem?date=${date}`, null);\n        },\n        updateSharedProblem: async (date, body)=>{\n            return axiosApi.post(`/api/v1/problem/shared-problem?date=${date}`, body, null);\n        },\n        getProblemInfoList: async (keyword)=>{\n            return axiosApi.get(`/api/v1/problem/problem/info/list?keyword=${keyword}`, null);\n        },\n        getUsersByProblem: async (problemId)=>{\n            return axiosApi.get(`/api/v1/problem/users/solved?problemId=${problemId}`, null);\n        },\n        getProblemSource: async (submitId)=>{\n            return axiosApi.get(`/api/v1/problem/source?submitId=${submitId}`, null);\n        }\n    }\n}\n\nexport default problemApi;"],"mappings":"AAAA,SAAQA,QAAQ,QAAO,wBAAwB;AAE/C,SAASC,UAAUA,CAAA,EAAE;EACjB,MAAMC,QAAQ,GAAGF,QAAQ,CAAC,CAAC;EAC3B,OAAO;IACHG,qBAAqB,EAAE,MAAOC,IAAI,IAAG;MACjC,OAAOF,QAAQ,CAACG,GAAG,CAAC,qDAAqDD,IAAI,EAAE,CAAC;IACpF,CAAC;IACDE,UAAU,EAAE,MAAOC,IAAI,IAAG;MACtB,OAAOL,QAAQ,CAACM,IAAI,CAAC,iBAAiB,EAAED,IAAI,EAAE,IAAI,CAAC;IACvD,CAAC;IACDE,YAAY,EAAE,MAAAA,CAAA,KAAU;MACpB,OAAOP,QAAQ,CAACG,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAAC;IACvD,CAAC;IACDK,gBAAgB,EAAE,MAAON,IAAI,IAAG;MAC5B,OAAOF,QAAQ,CAACG,GAAG,CAAC,uCAAuCD,IAAI,EAAE,EAAE,IAAI,CAAC;IAC5E,CAAC;IACDO,mBAAmB,EAAE,MAAAA,CAAOP,IAAI,EAAEG,IAAI,KAAG;MACrC,OAAOL,QAAQ,CAACM,IAAI,CAAC,uCAAuCJ,IAAI,EAAE,EAAEG,IAAI,EAAE,IAAI,CAAC;IACnF,CAAC;IACDK,kBAAkB,EAAE,MAAOC,OAAO,IAAG;MACjC,OAAOX,QAAQ,CAACG,GAAG,CAAC,6CAA6CQ,OAAO,EAAE,EAAE,IAAI,CAAC;IACrF,CAAC;IACDC,iBAAiB,EAAE,MAAOC,SAAS,IAAG;MAClC,OAAOb,QAAQ,CAACG,GAAG,CAAC,0CAA0CU,SAAS,EAAE,EAAE,IAAI,CAAC;IACpF,CAAC;IACDC,gBAAgB,EAAE,MAAOC,QAAQ,IAAG;MAChC,OAAOf,QAAQ,CAACG,GAAG,CAAC,mCAAmCY,QAAQ,EAAE,EAAE,IAAI,CAAC;IAC5E;EACJ,CAAC;AACL;AAEA,eAAehB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}