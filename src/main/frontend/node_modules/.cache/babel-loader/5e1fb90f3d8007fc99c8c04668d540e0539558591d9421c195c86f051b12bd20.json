{"ast":null,"code":"import{showTooltip,hideTooltip}from'../modal/tooltip/TooltipContainer';/**\n * 요소에 툴팁 이벤트를 추가하는 함수\n * @param {HTMLElement} element - 툴팁을 표시할 요소\n * @param {string} content - 툴팁 내용\n * @param {string} position - 툴팁 위치 ('top', 'bottom', 'left', 'right')\n */export const addTooltipToElement=function(element,content){let position=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'top';if(!element||!content)return;const handleMouseEnter=e=>{const rect=element.getBoundingClientRect();const x=rect.left+rect.width/2;const y=rect.top;showTooltip(content,x,y,position);};const handleMouseLeave=()=>{hideTooltip();};element.addEventListener('mouseenter',handleMouseEnter);element.addEventListener('mouseleave',handleMouseLeave);// 클린업 함수 반환\nreturn()=>{element.removeEventListener('mouseenter',handleMouseEnter);element.removeEventListener('mouseleave',handleMouseLeave);};};/**\n * React 컴포넌트에서 사용할 수 있는 툴팁 이벤트 핸들러\n * @param {string} content - 툴팁 내용\n * @param {string} position - 툴팁 위치\n * @returns {object} - onMouseEnter, onMouseLeave 핸들러\n */export const useTooltipHandlers=function(content){let position=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'top';const handleMouseEnter=e=>{const rect=e.currentTarget.getBoundingClientRect();const x=rect.left+rect.width/2;const y=rect.top;showTooltip(content,x,y,position);};const handleMouseLeave=()=>{hideTooltip();};return{onMouseEnter:handleMouseEnter,onMouseLeave:handleMouseLeave};};/**\n * 커스텀 툴팁 내용을 동적으로 생성하는 함수\n * @param {string} title - 툴팁 제목\n * @param {string} description - 툴팁 설명\n * @param {string} additionalInfo - 추가 정보\n * @returns {string} - HTML 형태의 툴팁 내용\n */export const createTooltipContent=function(title){let description=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';let additionalInfo=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';let content=\"<div style=\\\"font-weight: bold; margin-bottom: 4px;\\\">\".concat(title,\"</div>\");if(description){content+=\"<div style=\\\"margin-bottom: 4px;\\\">\".concat(description,\"</div>\");}if(additionalInfo){content+=\"<div style=\\\"font-size: 12px; opacity: 0.8;\\\">\".concat(additionalInfo,\"</div>\");}return content;};/**\n * 전역 툴팁 함수들을 window 객체에 등록\n */export const registerGlobalTooltip=()=>{window.addTooltipToElement=addTooltipToElement;window.useTooltipHandlers=useTooltipHandlers;window.createTooltipContent=createTooltipContent;window.showTooltip=showTooltip;window.hideTooltip=hideTooltip;};","map":{"version":3,"names":["showTooltip","hideTooltip","addTooltipToElement","element","content","position","arguments","length","undefined","handleMouseEnter","e","rect","getBoundingClientRect","x","left","width","y","top","handleMouseLeave","addEventListener","removeEventListener","useTooltipHandlers","currentTarget","onMouseEnter","onMouseLeave","createTooltipContent","title","description","additionalInfo","concat","registerGlobalTooltip","window"],"sources":["/Users/chan/Baektracker/src/main/frontend/src/js/setup/utils/TooltipUtils.js"],"sourcesContent":["import { showTooltip, hideTooltip } from '../modal/tooltip/TooltipContainer';\n\n/**\n * 요소에 툴팁 이벤트를 추가하는 함수\n * @param {HTMLElement} element - 툴팁을 표시할 요소\n * @param {string} content - 툴팁 내용\n * @param {string} position - 툴팁 위치 ('top', 'bottom', 'left', 'right')\n */\nexport const addTooltipToElement = (element, content, position = 'top') => {\n    if (!element || !content) return;\n\n    const handleMouseEnter = (e) => {\n        const rect = element.getBoundingClientRect();\n        const x = rect.left + rect.width / 2;\n        const y = rect.top;\n        \n        showTooltip(content, x, y, position);\n    };\n\n    const handleMouseLeave = () => {\n        hideTooltip();\n    };\n\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('mouseleave', handleMouseLeave);\n\n    // 클린업 함수 반환\n    return () => {\n        element.removeEventListener('mouseenter', handleMouseEnter);\n        element.removeEventListener('mouseleave', handleMouseLeave);\n    };\n};\n\n/**\n * React 컴포넌트에서 사용할 수 있는 툴팁 이벤트 핸들러\n * @param {string} content - 툴팁 내용\n * @param {string} position - 툴팁 위치\n * @returns {object} - onMouseEnter, onMouseLeave 핸들러\n */\nexport const useTooltipHandlers = (content, position = 'top') => {\n    const handleMouseEnter = (e) => {\n        const rect = e.currentTarget.getBoundingClientRect();\n        const x = rect.left + rect.width / 2;\n        const y = rect.top;\n        \n        showTooltip(content, x, y, position);\n    };\n\n    const handleMouseLeave = () => {\n        hideTooltip();\n    };\n\n    return {\n        onMouseEnter: handleMouseEnter,\n        onMouseLeave: handleMouseLeave\n    };\n};\n\n/**\n * 커스텀 툴팁 내용을 동적으로 생성하는 함수\n * @param {string} title - 툴팁 제목\n * @param {string} description - 툴팁 설명\n * @param {string} additionalInfo - 추가 정보\n * @returns {string} - HTML 형태의 툴팁 내용\n */\nexport const createTooltipContent = (title, description = '', additionalInfo = '') => {\n    let content = `<div style=\"font-weight: bold; margin-bottom: 4px;\">${title}</div>`;\n    \n    if (description) {\n        content += `<div style=\"margin-bottom: 4px;\">${description}</div>`;\n    }\n    \n    if (additionalInfo) {\n        content += `<div style=\"font-size: 12px; opacity: 0.8;\">${additionalInfo}</div>`;\n    }\n    \n    return content;\n};\n\n/**\n * 전역 툴팁 함수들을 window 객체에 등록\n */\nexport const registerGlobalTooltip = () => {\n    window.addTooltipToElement = addTooltipToElement;\n    window.useTooltipHandlers = useTooltipHandlers;\n    window.createTooltipContent = createTooltipContent;\n    window.showTooltip = showTooltip;\n    window.hideTooltip = hideTooltip;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}