{"ast":null,"code":"import { showTooltip, hideTooltip } from '../modal/tooltip/TooltipContainer';\n\n/**\n * 요소에 툴팁 이벤트를 추가하는 함수\n * @param {HTMLElement} element - 툴팁을 표시할 요소\n * @param {string} content - 툴팁 내용\n * @param {string} position - 툴팁 위치 ('top', 'bottom', 'left', 'right')\n */\nexport const addTooltipToElement = (element, content, position = 'top') => {\n  if (!element || !content) return;\n  const handleMouseEnter = e => {\n    const rect = element.getBoundingClientRect();\n    const x = rect.left + rect.width / 2;\n    const y = rect.top;\n    showTooltip(content, x, y, position);\n  };\n  const handleMouseLeave = () => {\n    hideTooltip();\n  };\n  element.addEventListener('mouseenter', handleMouseEnter);\n  element.addEventListener('mouseleave', handleMouseLeave);\n\n  // 클린업 함수 반환\n  return () => {\n    element.removeEventListener('mouseenter', handleMouseEnter);\n    element.removeEventListener('mouseleave', handleMouseLeave);\n  };\n};\n\n/**\n * React 컴포넌트에서 사용할 수 있는 툴팁 이벤트 핸들러\n * @param {string} content - 툴팁 내용\n * @param {string} position - 툴팁 위치\n * @returns {object} - onMouseEnter, onMouseLeave 핸들러\n */\nexport const useTooltipHandlers = (content, position = 'top') => {\n  const handleMouseEnter = e => {\n    const rect = e.currentTarget.getBoundingClientRect();\n    const x = rect.left + rect.width / 2;\n    const y = rect.top;\n    showTooltip(content, x, y, position);\n  };\n  const handleMouseLeave = () => {\n    hideTooltip();\n  };\n  return {\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave\n  };\n};\n\n/**\n * 커스텀 툴팁 내용을 동적으로 생성하는 함수\n * @param {string} title - 툴팁 제목\n * @param {string} description - 툴팁 설명\n * @param {string} additionalInfo - 추가 정보\n * @returns {string} - HTML 형태의 툴팁 내용\n */\nexport const createTooltipContent = (title, description = '', additionalInfo = '') => {\n  let content = `<div style=\"font-weight: bold; margin-bottom: 4px;\">${title}</div>`;\n  if (description) {\n    content += `<div style=\"margin-bottom: 4px;\">${description}</div>`;\n  }\n  if (additionalInfo) {\n    content += `<div style=\"font-size: 12px; opacity: 0.8;\">${additionalInfo}</div>`;\n  }\n  return content;\n};\n\n/**\n * 전역 툴팁 함수들을 window 객체에 등록\n */\nexport const registerGlobalTooltip = () => {\n  window.addTooltipToElement = addTooltipToElement;\n  window.useTooltipHandlers = useTooltipHandlers;\n  window.createTooltipContent = createTooltipContent;\n  window.showTooltip = showTooltip;\n  window.hideTooltip = hideTooltip;\n};","map":{"version":3,"names":["showTooltip","hideTooltip","addTooltipToElement","element","content","position","handleMouseEnter","e","rect","getBoundingClientRect","x","left","width","y","top","handleMouseLeave","addEventListener","removeEventListener","useTooltipHandlers","currentTarget","onMouseEnter","onMouseLeave","createTooltipContent","title","description","additionalInfo","registerGlobalTooltip","window"],"sources":["/Users/chan/Baektracker/baektracker-project/src/main/frontend/src/js/setup/utils/TooltipUtils.js"],"sourcesContent":["import { showTooltip, hideTooltip } from '../modal/tooltip/TooltipContainer';\n\n/**\n * 요소에 툴팁 이벤트를 추가하는 함수\n * @param {HTMLElement} element - 툴팁을 표시할 요소\n * @param {string} content - 툴팁 내용\n * @param {string} position - 툴팁 위치 ('top', 'bottom', 'left', 'right')\n */\nexport const addTooltipToElement = (element, content, position = 'top') => {\n    if (!element || !content) return;\n\n    const handleMouseEnter = (e) => {\n        const rect = element.getBoundingClientRect();\n        const x = rect.left + rect.width / 2;\n        const y = rect.top;\n        \n        showTooltip(content, x, y, position);\n    };\n\n    const handleMouseLeave = () => {\n        hideTooltip();\n    };\n\n    element.addEventListener('mouseenter', handleMouseEnter);\n    element.addEventListener('mouseleave', handleMouseLeave);\n\n    // 클린업 함수 반환\n    return () => {\n        element.removeEventListener('mouseenter', handleMouseEnter);\n        element.removeEventListener('mouseleave', handleMouseLeave);\n    };\n};\n\n/**\n * React 컴포넌트에서 사용할 수 있는 툴팁 이벤트 핸들러\n * @param {string} content - 툴팁 내용\n * @param {string} position - 툴팁 위치\n * @returns {object} - onMouseEnter, onMouseLeave 핸들러\n */\nexport const useTooltipHandlers = (content, position = 'top') => {\n    const handleMouseEnter = (e) => {\n        const rect = e.currentTarget.getBoundingClientRect();\n        const x = rect.left + rect.width / 2;\n        const y = rect.top;\n        \n        showTooltip(content, x, y, position);\n    };\n\n    const handleMouseLeave = () => {\n        hideTooltip();\n    };\n\n    return {\n        onMouseEnter: handleMouseEnter,\n        onMouseLeave: handleMouseLeave\n    };\n};\n\n/**\n * 커스텀 툴팁 내용을 동적으로 생성하는 함수\n * @param {string} title - 툴팁 제목\n * @param {string} description - 툴팁 설명\n * @param {string} additionalInfo - 추가 정보\n * @returns {string} - HTML 형태의 툴팁 내용\n */\nexport const createTooltipContent = (title, description = '', additionalInfo = '') => {\n    let content = `<div style=\"font-weight: bold; margin-bottom: 4px;\">${title}</div>`;\n    \n    if (description) {\n        content += `<div style=\"margin-bottom: 4px;\">${description}</div>`;\n    }\n    \n    if (additionalInfo) {\n        content += `<div style=\"font-size: 12px; opacity: 0.8;\">${additionalInfo}</div>`;\n    }\n    \n    return content;\n};\n\n/**\n * 전역 툴팁 함수들을 window 객체에 등록\n */\nexport const registerGlobalTooltip = () => {\n    window.addTooltipToElement = addTooltipToElement;\n    window.useTooltipHandlers = useTooltipHandlers;\n    window.createTooltipContent = createTooltipContent;\n    window.showTooltip = showTooltip;\n    window.hideTooltip = hideTooltip;\n}; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,mCAAmC;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAACC,OAAO,EAAEC,OAAO,EAAEC,QAAQ,GAAG,KAAK,KAAK;EACvE,IAAI,CAACF,OAAO,IAAI,CAACC,OAAO,EAAE;EAE1B,MAAME,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,MAAMC,IAAI,GAAGL,OAAO,CAACM,qBAAqB,CAAC,CAAC;IAC5C,MAAMC,CAAC,GAAGF,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACI,KAAK,GAAG,CAAC;IACpC,MAAMC,CAAC,GAAGL,IAAI,CAACM,GAAG;IAElBd,WAAW,CAACI,OAAO,EAAEM,CAAC,EAAEG,CAAC,EAAER,QAAQ,CAAC;EACxC,CAAC;EAED,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;IAC3Bd,WAAW,CAAC,CAAC;EACjB,CAAC;EAEDE,OAAO,CAACa,gBAAgB,CAAC,YAAY,EAAEV,gBAAgB,CAAC;EACxDH,OAAO,CAACa,gBAAgB,CAAC,YAAY,EAAED,gBAAgB,CAAC;;EAExD;EACA,OAAO,MAAM;IACTZ,OAAO,CAACc,mBAAmB,CAAC,YAAY,EAAEX,gBAAgB,CAAC;IAC3DH,OAAO,CAACc,mBAAmB,CAAC,YAAY,EAAEF,gBAAgB,CAAC;EAC/D,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,kBAAkB,GAAGA,CAACd,OAAO,EAAEC,QAAQ,GAAG,KAAK,KAAK;EAC7D,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,MAAMC,IAAI,GAAGD,CAAC,CAACY,aAAa,CAACV,qBAAqB,CAAC,CAAC;IACpD,MAAMC,CAAC,GAAGF,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACI,KAAK,GAAG,CAAC;IACpC,MAAMC,CAAC,GAAGL,IAAI,CAACM,GAAG;IAElBd,WAAW,CAACI,OAAO,EAAEM,CAAC,EAAEG,CAAC,EAAER,QAAQ,CAAC;EACxC,CAAC;EAED,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;IAC3Bd,WAAW,CAAC,CAAC;EACjB,CAAC;EAED,OAAO;IACHmB,YAAY,EAAEd,gBAAgB;IAC9Be,YAAY,EAAEN;EAClB,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,oBAAoB,GAAGA,CAACC,KAAK,EAAEC,WAAW,GAAG,EAAE,EAAEC,cAAc,GAAG,EAAE,KAAK;EAClF,IAAIrB,OAAO,GAAG,uDAAuDmB,KAAK,QAAQ;EAElF,IAAIC,WAAW,EAAE;IACbpB,OAAO,IAAI,oCAAoCoB,WAAW,QAAQ;EACtE;EAEA,IAAIC,cAAc,EAAE;IAChBrB,OAAO,IAAI,+CAA+CqB,cAAc,QAAQ;EACpF;EAEA,OAAOrB,OAAO;AAClB,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMsB,qBAAqB,GAAGA,CAAA,KAAM;EACvCC,MAAM,CAACzB,mBAAmB,GAAGA,mBAAmB;EAChDyB,MAAM,CAACT,kBAAkB,GAAGA,kBAAkB;EAC9CS,MAAM,CAACL,oBAAoB,GAAGA,oBAAoB;EAClDK,MAAM,CAAC3B,WAAW,GAAGA,WAAW;EAChC2B,MAAM,CAAC1B,WAAW,GAAGA,WAAW;AACpC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}